name: Full CDK Deploy (Backend + Frontend)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '22'

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Install dependencies for frontend
    - name: Install Frontend Dependencies
      run: npm install
      working-directory: frontend


    # Build the frontend React app
    - name: Build React App
      run: |
        npm run build
        ls -la
      working-directory: frontend
    
    - name: Debug Build Directory Permissions
      run: |
        echo "Checking file permissions..."
        ls -lah
        echo "Checking ownership..."
        ls -ld build
        echo "Checking who can write to build directory..."
        test -w build && echo "✅ Write access exists" || echo "❌ No write access"
      working-directory: frontend
    
    - name: Fix Build Directory Permissions
      run: sudo chown -R $USER:$USER build
      working-directory: frontend
    
    - name: Verify Build Directory
      run: |
        if [ ! -d "./build" ]; then 
          echo "Build directory not found! Exiting.";
          exit 1;
        fi
      working-directory: frontend
    
    - name: Install CDK and Dependencies
      run: |
        npm install
        npm install --save-dev aws-cdk
      working-directory: frontend/cdk

    - name: Deploy Infrastructure with CDK (Including React App)
      run: |
        npm run cdk deploy -- --require-approval never
      working-directory: frontend/cdk

    
    - name: Get S3 Bucket Name
      run: |
        S3_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ReactAppCdkStack \
          --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" --output text)

        if [[ -z "$S3_BUCKET_NAME" ]]; then
          echo "❌ S3 bucket name not found!"
          exit 1
        fi

        echo "✅ Found S3 Bucket Name: $S3_BUCKET_NAME"
        echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> $GITHUB_ENV


    - name: Get CloudFront Distribution ID
      run: |
        DISTRIBUTION_ID=$(aws cloudfront list-distributions \
          --query "DistributionList.Items[?contains(Origins.Items[0].DomainName, '$S3_BUCKET_NAME.s3.amazonaws.com')].Id" --output text)

        if [[ -z "$DISTRIBUTION_ID" ]]; then
          echo "❌ No CloudFront distribution found!"
          exit 1
        fi

        echo "✅ Found CloudFront Distribution ID: $DISTRIBUTION_ID"
        echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV

    # Invalidate CloudFront Cache
    - name: Invalidate CloudFront Cache
      run: |
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
        echo "✅ CloudFront cache invalidation triggered"

    # Step 4: Fetch CloudFront Domain & Public IP
    - name: Get CloudFront IP
      run: |
        CLOUDFRONT_DOMAIN=$(aws cloudfront list-distributions \
          --query "DistributionList.Items[?Id=='$DISTRIBUTION_ID'].DomainName" --output text)

        if [[ -z "$CLOUDFRONT_DOMAIN" ]]; then
          echo "❌ CloudFront domain not found!"
          exit 1
        fi

        echo "✅ CloudFront deployed at: https://$CLOUDFRONT_DOMAIN"
        echo "CLOUDFRONT_DOMAIN=$CLOUDFRONT_DOMAIN" >> $GITHUB_ENV

        CLOUDFRONT_IP=$(dig +short $CLOUDFRONT_DOMAIN | head -n 1)

        if [[ -z "$CLOUDFRONT_IP" ]]; then
          echo "❌ Failed to fetch CloudFront IP!"
          exit 1
        fi

        echo "✅ CloudFront IP: $CLOUDFRONT_IP"
        echo "allowedip=$CLOUDFRONT_IP/32" >> $GITHUB_ENV


     # Install dependencies for backend
    - name: Install Backend Dependencies
      run: npm install
      working-directory: backend

    # Deploy Backend with CDK
    - name: Deploy Backend with CDK
      run: npx cdk deploy --require-approval never --context allowedip="${{ env.allowedip }}"
      working-directory: backend
